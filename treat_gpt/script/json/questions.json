[
  {
    "timestamp": "2025-08-25T18:05:34.378623",
    "user_question": "can you make the ascii art and the answer be NEXT to each other in my python cli? #!/home/arshia/petfetch/.venv/bin/python                                                                                                  \nimport rich_click as click                                                                                                                \nfrom rich_click.rich_command import RichCommand                                                                                           \nimport requests                                                                                                                           \nimport shutil                                                                                                                             \nimport toml                                                                                                                               \nfrom pathlib import Path                                                                                                                  \nfrom rich.console import Console                                                                                                          \nfrom rich.panel import Panel                                                                                                              \nfrom rich.markdown import Markdown                                                                                                        \nfrom git_comits.commit import get_comits                                                                                                  \nfrom prompt_toolkit import prompt                                                                                                         \nfrom prompt_toolkit.history import InMemoryHistory                                                                                        \nimport json                                                                                                                               \nfrom datetime import datetime                                                                                                             \nimport os                                                                                                                                 \n                                                                                                                                           \nconsole = Console()                                                                                                                       \nDATA_FILE = Path(\"questions.toml\")                                                                                                        \nHISTORY_FILE = Path(\"/home/arshia/petfetch/script/json/questions.json\")                                                                   \nhistory = InMemoryHistory()                                                                                                               \n                                                                                                                                           \n# -----------------------------                                                                                                           \n# Chat History Functions                                                                                                                  \n# -----------------------------                                                                                                           \ndef load_chat_history():                                                                                                                  \n    \"\"\"Load chat history from JSON file.\"\"\"                                                                                               \n    if not HISTORY_FILE.exists():                                                                                                         \n         HISTORY_FILE.parent.mkdir(parents=True, exist_ok=True)                                                                            \n         with open(HISTORY_FILE, \"w\") as f:                                                                                                \n             json.dump([], f)                                                                                                              \n         return []                                                                                                                         \n                                                                                                                                           \n    try:                                                                                                                                  \n         with open(HISTORY_FILE, \"r\") as f:                                                                                                \n             return json.load(f)                                                                                                           \n    except json.JSONDecodeError:                                                                                                          \n         return []                                                                                                                         \n                                                                                                                                           \ndef save_chat_history(history_data):                                                                                                      \n     \"\"\"Save chat history to JSON file.\"\"\"                                                                                                 \n     with open(HISTORY_FILE, \"w\") as f:                                                                                                    \n         json.dump(history_data, f, indent=2)                                                                                              \n                                                                                                                                           \ndef add_to_history(user_question, assistant_response, model_used):                                                                        \n     \"\"\"Add a new conversation to the history.\"\"\"                                                                                          \n     history_data = load_chat_history()                                                                                                    \n                                                                                                                                           \n     new_entry = {                                                                                                                         \n         \"timestamp\": datetime.now().isoformat(),                                                                                          \n         \"user_question\": user_question,                                                                                                   \n         \"assistant_response\": assistant_response,                                                                                         \n         \"model_used\": model_used                                                                                                          \n     }                                                                                                                                     \n                                                                                                                                           \n     history_data.append(new_entry)                                                                                                        \n     save_chat_history(history_data)                                                                                                       \n                                                                                                                                           \n# -----------------------------                                                                                                           \n# TOML load/save helpers                                                                                                                  \n# -----------------------------                                                                                                           \ndef load_questions():                                                                                                                     \n     if DATA_FILE.exists():                                                                                                                \n         data = toml.load(DATA_FILE)                                                                                                       \n         return data.get(\"questions\", 0)                                                                                                   \n     return 0                                                                                                                              \n                                                                                                                                           \ndef save_questions(questions):                                                                                                            \n     with open(DATA_FILE, \"w\") as f:                                                                                                       \n         toml.dump({\"questions\": questions}, f)                                                                                            \n                                                                                                                                           \n# -----------------------------                                                                                                           \n# Ask box function                                                                                                                        \n# -----------------------------                                                                                                           \nASCII_FILE = Path(\"/home/arshia/petfetch/src/ascii-art.txt\")                                                                              \n                                                                                                                                           \ndef ask_box(prompt_text=\"Your question\", gap_lines=1):                                                                                    \n    # Load ASCII art                                                                                                                      \n     if ASCII_FILE.exists():                                                                                                               \n         with open(ASCII_FILE, \"r\") as f:                                                                                                  \n             ascii_art = f.read()                                                                                                          \n     else:                                                                                                                                 \n         ascii_art = \"\"                                                                                                                    \n                                                                                                                                           \n    # Display ASCII inside a panel with white border and fixed width                                                                      \n     console.print(Panel(ascii_art, border_style=\"white\", expand=False))                                                                   \n                                                                                                                                           \n    # Add gap lines                                                                                                                       \n     for _ in range(gap_lines):                                                                                                            \n         console.print(\"\")                                                                                                                 \n                                                                                                                                           \n    # Show prompt in a panel with white border and full width                                                                             \n     console.print(Panel(f\"[bold cyan]{prompt_text}[/bold cyan]\", border_style=\"white\", expand=True))                                      \n                                                                                                                                           \n    # Get user input with arrow keys + history                                                                                            \n     question = prompt(\"\u2502     \", history=history)                                                                                          \n     return question                                                                                                                       \n                                                                                                                                           \n# -----------------------------                                                                                                           \n# Main CLI command                                                                                                                        \n# -----------------------------                                                                                                           \n@click.command(cls=RichCommand)                                                                                                           \ndef ask():                                                                                                                                \n     pushes, commits = get_comits() # separate pushes and commits                                                                         \n     questions = load_questions()                                                                                                          \n                                                                                                                                           \n    # Increment questions by 5 per push event                                                                                             \n     questions += len(pushes) * 5                                                                                                          \n                                                                                                                                           \n     if questions <= 0:                                                                                                                    \n         console.print(                                                                                                                    \n             Panel(\"[red]Bro, go commit! You can't ask a question if you don't commit.[/red]\",                                             \n                   title=\"\u26a0\ufe0f No Commits\")                                                                                                   \n         )                                                                                                                                 \n         save_questions(questions)                                                                                                         \n         return                                                                                                                            \n                                                                                                                                           \n    # Show total available questions                                                                                                      \n     console.print(                                                                                                                        \n         Panel(f\"[bold green]Total Questions Available:[/bold green] {questions}\", title=\"\ud83d\udcca Questions\")                                   \n     )                                                                                                                                     \n                                                                                                                                           \n    # Ask the user                                                                                                                        \n     question = ask_box()                                                                                                                  \n                                                                                                                                           \n    # Call OpenRouter API                                                                                                                 \n     url = \"https://openrouter.ai/api/v1/chat/completions\"                                                                                 \n     headers = {                                                                                                                           \n         \"Authorization\": \"Bearer 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\", # put your API key here                                                                       \n         \"Content-Type\": \"application/json\",                                                                                               \n     }                                                                                                                                     \n                                                                                                                                           \n     payload = {                                                                                                                           \n         \"model\": \"deepseek/deepseek-chat\",                                                                                                \n         \"messages\": [{\"role\": \"user\", \"content\": question}],                                                                              \n     }                                                                                                                                     \n                                                                                                                                           \n     try:                                                                                                                                  \n         response = requests.post(url, headers=headers, json=payload).json()                                                               \n                                                                                                                                           \n         if \"error\" in response:                                                                                                           \n             console.print(                                                                                                                \n                 Panel(f\"[red bold]Error:[/red bold] {response['error']['message']}\",                                                      \n                       title=\"\u274c API Error\",                                                                                               \n                       border_style=\"red\")                                                                                                 \n             )                                                                                                                             \n         else:                                                                                                                             \n             model = response.get(\"model\", \"unknown\")                                                                                      \n             message = response[\"choices\"][0][\"message\"][\"content\"]                                                                        \n                                                                                                                                           \n            # Add conversation to history                                                                                                 \n             add_to_history(question, message, model)                                                                                      \n                                                                                                                                           \n             console.rule(f\"[bold green]\ud83e\udd16 Assistant (Model: {model})[/bold green]\")                                                       \n                                                                                                                                           \n             try:                                                                                                                          \n                 md = Markdown(message)                                                                                                    \n                 console.print(md)                                                                                                         \n             except Exception:                                                                                                             \n                 console.print(message)                                                                                                    \n                                                                                                                                           \n             console.rule(\"[bold blue]End[/bold blue]\")                                                                                    \n                                                                                                                                           \n     except requests.exceptions.RequestException as e:                                                                                     \n         console.print(Panel(f\"[red]Error fetching API:[/red] {e}\", title=\"\u274c Network Error\"))                                             \n                                                                                                                                           \n    # Decrement questions after usage                                                                                                     \n     questions -= 1                                                                                                                        \n     save_questions(questions)                                                                                                             \n                                                                                                                                           \n    # Show remaining questions                                                                                                            \n     console.print(                                                                                                                        \n         Panel(f\"[bold yellow]Remaining Questions:[/bold yellow] {questions}\", title=\"\ud83d\udccc Status\")                                          \n     )                                                                                                                                     \n                                                                                                                                           \n# -----------------------------                                                                                                           \n# Run CLI                                                                                                                                 \n# -----------------------------                                                                                                           \nif __name__ == \"__main__\":                                                                                                                \n     ask()   ",
    "assistant_response": "To display the ASCII art and the answer side by side in your Python CLI, you'll need to modify the `ask_box` function and the section where the response is displayed. Here's how you can do it:\n\n```python\ndef ask_box(prompt_text=\"Your question\", gap_lines=1):\n    \"\"\"Modified to return ASCII art along with the question\"\"\"\n    # Load ASCII art\n    if ASCII_FILE.exists():\n        with open(ASCII_FILE, \"r\") as f:\n            ascii_art = f.read()\n    else:\n        ascii_art = \"\"\n    \n    # Show prompt in a panel with white border and full width\n    console.print(Panel(f\"[bold cyan]{prompt_text}[/bold cyan]\", border_style=\"white\", expand=True))\n    \n    # Get user input with arrow keys + history\n    question = prompt(\"\u2502     \", history=history)\n    return question, ascii_art  # Return both the question and ASCII art\n\n# -----------------------------\n# Main CLI command\n# -----------------------------\n@click.command(cls=RichCommand)\ndef ask():\n    pushes, commits = get_comits() # separate pushes and commits\n    questions = load_questions()\n    \n    # Increment questions by 5 per push event\n    questions += len(pushes) * 5\n    \n    if questions <= 0:\n        console.print(\n            Panel(\"[red]Bro, go commit! You can't ask a question if you don't commit.[/red]\",\n                  title=\"\u26a0\ufe0f No Commits\")\n        )\n        save_questions(questions)\n        return\n        \n    # Show total available questions\n    console.print(\n        Panel(f\"[bold green]Total Questions Available:[/bold green] {questions}\", title=\"\ud83d\udcca Questions\")\n    )\n    \n    # Ask the user (now returns both question and ASCII art)\n    question, ascii_art = ask_box()\n    \n    # Call OpenRouter API\n    url = \"https://openrouter.ai/api/v1/chat/completions\"\n    headers = {\n        \"Authorization\": \"Bearer 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\",\n        \"Content-Type\": \"application/json\",\n    }\n    \n    payload = {\n        \"model\": \"deepseek/deepseek-chat\",\n        \"messages\": [{\"role\": \"user\", \"content\": question}],\n    }\n    \n    try:\n        response = requests.post(url, headers=headers, json=payload).json()\n        \n        if \"error\" in response:\n            console.print(\n                Panel(f\"[red bold]Error:[/red bold] {response['error']['message']}\",\n                      title=\"\u274c API Error\",\n                      border_style=\"red\")\n            )\n        else:\n            model = response.get(\"model\", \"unknown\")\n            message = response[\"choices\"][0][\"message\"][\"content\"]\n            \n            # Add conversation to history\n            add_to_history(question, message, model)\n            \n            console.rule(f\"[bold green]\ud83e\udd16 Assistant (Model: {model})[/bold green]\")\n            \n            # Create a table to display ASCII art and response side by side\n            from rich.columns import Columns\n            from rich.panel import Panel\n            \n            # Split ASCII art into lines\n            ascii_lines = ascii_art.split('\\n')\n            message_lines = message.split('\\n')\n            \n            # Determine the maximum number of lines\n            max_lines = max(len(ascii_lines), len(message_lines))\n            \n            # Create panels for side-by-side display\n            panels = [\n                Panel(\"\\n\".join(ascii_lines), border_style=\"white\", width=40),\n                Panel(\"\\n\".join(message_lines), border_style=\"blue\", width=80)\n            ]\n            \n            # Display them side by side\n            console.print(Columns(panels))\n            \n            console.rule(\"[bold blue]End[/bold blue]\")\n            \n    except requests.exceptions.RequestException as e:\n        console.print(Panel(f\"[red]Error fetching API:[/red] {e}\", title=\"\u274c Network Error\"))\n        \n    # Decrement questions after usage\n    questions -= 1\n    save_questions(questions)\n    \n    # Show remaining questions\n    console.print(\n        Panel(f\"[bold yellow]Remaining Questions:[/bold yellow] {questions}\", title=\"\ud83d\udccc Status\")\n    )\n```\n\nKey changes made:\n\n1. Modified `ask_box()` to return both the question and ASCII art\n2. In the main `ask()` function, we now unpack both values from `ask_box()`\n3. Added logic to display the ASCII art and response side by side using `rich.columns.Columns`\n4. Each content is placed in its own panel with different border colors for distinction\n5. The ASCII art panel is given a fixed width (40) while the response panel is wider (80)\n\nThis will display the ASCII art on the left and the assistant's response on the right, side by side. You can adjust the widths as needed to fit your terminal.\n\nNote: Make sure you have the `rich` library installed (`pip install rich`) as this solution uses its `Columns` feature for the side-by-side layout.",
    "model_used": "deepseek/deepseek-chat"
  }
]
